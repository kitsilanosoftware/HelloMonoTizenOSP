//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

public partial class TizenFAppApp
{
    public struct Internal
    {
        [SuppressUnmanagedCodeSecurity]
        [DllImport("libosp-appfw.so.1.2.1", CallingConvention = CallingConvention.Cdecl,
            EntryPoint="main")]
        public static extern int main0(int argc, global::System.IntPtr pArgv);
    }

    public static int main(int argc, global::System.IntPtr pArgv)
    {
        var arg1 = Marshal.StringToHGlobalAnsi(pArgv);
        var ret = Internal.main0(argc, arg1);
        Marshal.FreeHGlobal(arg1);
        return ret;
    }
}
namespace Tizen
{
    namespace Base
    {
        namespace Collection
        {
        }
    }
    namespace App
    {

        public unsafe partial class App : Tizen.Base.Object, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new struct Internal
            {
                /// <summary>
                /// This is the default constructor for this class.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??0App@0Tizen@@IAE@XZ")]
                public static extern global::System.IntPtr App0(global::System.IntPtr instance);

                /// <summary>
                /// Gets the current state of the application.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppState@App@1Tizen@@QBE?AW4AppState@12@XZ")]
                public static extern AppState GetAppState0(global::System.IntPtr instance);

                /// <summary>
                /// Gets the locale-independent name of the application.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppName@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppName0(global::System.IntPtr instance, global::System.IntPtr _return);

                /// <summary>
                /// Gets the display name of the application. If the system
                /// language setting is changed, the %GetAppDisplayName()
                /// method returns the localized application name. The display
                /// name is displayed in applications like Launcher, Setting,
                /// Task Manager, and so on.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppDisplayName@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppDisplayName0(global::System.IntPtr instance, global::System.IntPtr _return);

                /// <summary>
                /// Gets the version of the application.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppVersion@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppVersion0(global::System.IntPtr instance, global::System.IntPtr _return);

                /// <summary>
                /// Gets the application ID.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppId@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppId0(global::System.IntPtr instance);

                /// <summary>
                /// Gets the path of the application's root directory where
                /// the application is installed.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppRootPath@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppRootPath0(global::System.IntPtr instance, global::System.IntPtr _return);

                /// <summary>
                /// Gets the path of the application's data directory used
                /// to store its own private data.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppDataPath@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppDataPath0(global::System.IntPtr instance, global::System.IntPtr _return);

                /// <summary>
                /// Gets the path of the application's resource directory
                /// that ships resource files delivered with the application
                /// package.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppResourcePath@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppResourcePath0(global::System.IntPtr instance, global::System.IntPtr _return);

                /// <summary>
                /// Gets the path of the application's shared directory to
                /// export data to other applications.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetAppSharedPath@App@1Tizen@@QBE?AVString@Base@2@XZ")]
                public static extern String.Internal GetAppSharedPath0(global::System.IntPtr instance, global::System.IntPtr _return);

                /// <summary>
                /// Terminates the application while it is running. The
                /// OnAppTerminating() method is called after the %Terminate()
                /// method is executed successfully.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Terminate@App@1Tizen@@QAEKXZ")]
                public static extern uint Terminate0(global::System.IntPtr instance);

                /// <summary>
                /// Called when the application's initialization is
                /// finished. After the %OnAppInitialized() method succeeds,
                /// the application's state changes to App::RUNNING. If this
                /// method fails, the application's state changes to
                /// App::TERMINATING and the App::OnAppTerminating() method is
                /// called.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?OnAppInitialized@App@1Tizen@@UAE_NXZ")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool OnAppInitialized0(global::System.IntPtr instance);

                /// <summary>
                /// Called when the application is requested to terminate.
                /// The %OnAppWillTerminate() method returns false to prevent
                /// the application from getting terminated. If this method
                /// returns true, the application's state changes to
                /// App::TERMINATING and the App::OnAppTerminating() method is
                /// called.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?OnAppWillTerminate@App@1Tizen@@UAE_NXZ")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool OnAppWillTerminate0(global::System.IntPtr instance);

                /// <summary>
                /// Called when the system detects that the system wide
                /// memory or application heap memory is insufficient to run
                /// the application any further. Resources that are not in use
                /// currently can be released using the %OnLowMemory() method.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?OnLowMemory@App@1Tizen@@UAEXXZ")]
                public static extern void OnLowMemory0(global::System.IntPtr instance);

                /// <summary>
                /// Called when the battery level changes. It is
                /// recommended that the application consuming more battery
                /// power must be terminated if the battery level is
                /// Tizen::System::BATTERY_LEVEL_CRITICAL.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?OnBatteryLevelChanged@App@1Tizen@@UAEXW4BatteryLevel@System@2@@Z")]
                public static extern void OnBatteryLevelChanged0(global::System.IntPtr instance, BatteryLevel batteryLevel);

                /// <summary>
                /// Gets the %App instance's pointer.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?GetInstance@App@1Tizen@@SAPAV112@XZ")]
                public static extern global::System.IntPtr GetInstance0();
            }

            internal App(App.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal App(App.Internal native)
                : this(&native)
            {
            }

            internal App(global::System.IntPtr native)
                : base(native)
            {
            }

            protected override void Dispose(bool disposing)
            {
                base.Dispose(disposing);
            }

            /// <summary>
            /// Gets the current state of the application.
            /// </summary>
            public AppState GetAppState()
            {
                var ret = Internal.GetAppState0(_Instance);
                return ret;
            }

            /// <summary>
            /// Gets the locale-independent name of the application.
            /// </summary>
            public String GetAppName()
            {
                var _udt = new String.Internal();
                Internal.GetAppName0(_Instance, new IntPtr(&_udt));
                var ret = new String(_udt);
                return ret;
            }

            /// <summary>
            /// Gets the display name of the application. If the system
            /// language setting is changed, the %GetAppDisplayName() method
            /// returns the localized application name. The display name is
            /// displayed in applications like Launcher, Setting, Task Manager,
            /// and so on.
            /// </summary>
            public String GetAppDisplayName()
            {
                var _udt = new String.Internal();
                Internal.GetAppDisplayName0(_Instance, new IntPtr(&_udt));
                var ret = new String(_udt);
                return ret;
            }

            /// <summary>
            /// Gets the version of the application.
            /// </summary>
            public String GetAppVersion()
            {
                var _udt = new String.Internal();
                Internal.GetAppVersion0(_Instance, new IntPtr(&_udt));
                var ret = new String(_udt);
                return ret;
            }

            /// <summary>
            /// Gets the application ID.
            /// </summary>
            public String GetAppId()
            {
                var ret = Internal.GetAppId0(_Instance);
                return new Tizen.Base.String(ret);
            }

            /// <summary>
            /// Gets the path of the application's root directory where the
            /// application is installed.
            /// </summary>
            public String GetAppRootPath()
            {
                var _udt = new String.Internal();
                Internal.GetAppRootPath0(_Instance, new IntPtr(&_udt));
                var ret = new String(_udt);
                return ret;
            }

            /// <summary>
            /// Gets the path of the application's data directory used to
            /// store its own private data.
            /// </summary>
            public String GetAppDataPath()
            {
                var _udt = new String.Internal();
                Internal.GetAppDataPath0(_Instance, new IntPtr(&_udt));
                var ret = new String(_udt);
                return ret;
            }

            /// <summary>
            /// Gets the path of the application's resource directory that
            /// ships resource files delivered with the application package.
            /// </summary>
            public String GetAppResourcePath()
            {
                var _udt = new String.Internal();
                Internal.GetAppResourcePath0(_Instance, new IntPtr(&_udt));
                var ret = new String(_udt);
                return ret;
            }

            /// <summary>
            /// Gets the path of the application's shared directory to
            /// export data to other applications.
            /// </summary>
            public String GetAppSharedPath()
            {
                var _udt = new String.Internal();
                Internal.GetAppSharedPath0(_Instance, new IntPtr(&_udt));
                var ret = new String(_udt);
                return ret;
            }

            /// <summary>
            /// Terminates the application while it is running. The
            /// OnAppTerminating() method is called after the %Terminate()
            /// method is executed successfully.
            /// </summary>
            public uint Terminate()
            {
                var ret = Internal.Terminate0(_Instance);
                return ret;
            }

            /// <summary>
            /// Called when the application's initialization is finished.
            /// After the %OnAppInitialized() method succeeds, the
            /// application's state changes to App::RUNNING. If this method
            /// fails, the application's state changes to App::TERMINATING and
            /// the App::OnAppTerminating() method is called.
            /// </summary>
            public bool OnAppInitialized()
            {
                var ret = Internal.OnAppInitialized0(_Instance);
                return ret;
            }

            /// <summary>
            /// Called when the application is requested to terminate. The
            /// %OnAppWillTerminate() method returns false to prevent the
            /// application from getting terminated. If this method returns
            /// true, the application's state changes to App::TERMINATING and
            /// the App::OnAppTerminating() method is called.
            /// </summary>
            public bool OnAppWillTerminate()
            {
                var ret = Internal.OnAppWillTerminate0(_Instance);
                return ret;
            }

            /// <summary>
            /// Called when the system detects that the system wide memory
            /// or application heap memory is insufficient to run the
            /// application any further. Resources that are not in use
            /// currently can be released using the %OnLowMemory() method.
            /// </summary>
            public void OnLowMemory()
            {
                Internal.OnLowMemory0(_Instance);
            }

            /// <summary>
            /// Called when the battery level changes. It is recommended
            /// that the application consuming more battery power must be
            /// terminated if the battery level is
            /// Tizen::System::BATTERY_LEVEL_CRITICAL.
            /// </summary>
            public void OnBatteryLevelChanged(BatteryLevel batteryLevel)
            {
                var arg0 = batteryLevel;
                Internal.OnBatteryLevelChanged0(_Instance, arg0);
            }

            /// <summary>
            /// Gets the %App instance's pointer.
            /// </summary>
            public static App GetInstance()
            {
                var ret = Internal.GetInstance0();
                return new Tizen.App.App(ret);
            }
        }
    }
}
