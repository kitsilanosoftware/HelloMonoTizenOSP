//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Tizen
{
    namespace System
    {
        public unsafe partial class Battery : Tizen.Base.Object, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public new struct Internal
            {
                /// <summary>
                /// This is the default constructor for this class. This
                /// default constructor is intentionally declared as private so
                /// that only the platform can create an instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("libosp-appfw.so.1.2.1", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="_ZN5Tizen6System7BatteryC2Ev")]
                public static extern global::System.IntPtr Battery0(global::System.IntPtr instance);

                /// <summary>
                /// Gets the current charge remaining in the battery as a
                /// percentage.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("libosp-appfw.so.1.2.1", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="_ZN5Tizen6System7Battery27GetCurrentLevelInPercentageERi")]
                public static extern uint GetCurrentLevelInPercentage0(global::System.IntPtr level);

                /// <summary>
                /// Gets the current charging level of the battery.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("libosp-appfw.so.1.2.1", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="_ZN5Tizen6System7Battery15GetCurrentLevelERNS0_12BatteryLevelE")]
                public static extern uint GetCurrentLevel0(BatteryLevel level);

                /// <summary>
                /// Checks whether the battery is currently charging.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("libosp-appfw.so.1.2.1", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="_ZN5Tizen6System7Battery10IsChargingERb")]
                public static extern uint IsCharging0(global::System.IntPtr charging);
            }

            internal Battery(Battery.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal Battery(Battery.Internal native)
                : this(&native)
            {
            }

            internal Battery(global::System.IntPtr native)
                : base(native)
            {
            }

            protected override void Dispose(bool disposing)
            {
                base.Dispose(disposing);
            }

            /// <summary>
            /// Gets the current charge remaining in the battery as a
            /// percentage.
            /// </summary>
            public static uint GetCurrentLevelInPercentage(global::System.IntPtr level)
            {
                var arg0 = level;
                var ret = Internal.GetCurrentLevelInPercentage0(arg0);
                return ret;
            }

            /// <summary>
            /// Gets the current charging level of the battery.
            /// </summary>
            public static uint GetCurrentLevel(BatteryLevel level)
            {
                var arg0 = level;
                var ret = Internal.GetCurrentLevel0(arg0);
                return ret;
            }

            /// <summary>
            /// Checks whether the battery is currently charging.
            /// </summary>
            public static uint IsCharging(global::System.IntPtr charging)
            {
                var arg0 = charging;
                var ret = Internal.IsCharging0(arg0);
                return ret;
            }
        }
    }
}
