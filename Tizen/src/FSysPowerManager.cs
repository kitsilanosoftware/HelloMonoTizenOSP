//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Tizen
{
    namespace System
    {
        /// <summary>
        /// Defines the representation of the remaining charge in the battery.
        /// </summary>
        public enum BatteryLevel
        {
            BATTERY_FULL = 0,
            BATTERY_HIGH = 1,
            BATTERY_LOW = 2,
            BATTERY_CRITICAL = 3,
            BATTERY_EMPTY = 4,
            /// <summary>The battery is fully charged</summary>
            BATTERY_LEVEL_FULL = 0,
            /// <summary>The battery has plenty of charge</summary>
            BATTERY_LEVEL_HIGH = 1,
            /// <summary>The battery has little charge</summary>
            BATTERY_LEVEL_LOW = 2,
            /// <summary>The battery charge is at a critical state It is strongly recommended to stop using all multimedia features because they are not guaranteed to work correctly at this level.</summary>
            BATTERY_LEVEL_CRITICAL = 3,
            /// <summary>The battery is empty It is strongly recommended to prepare for the safe termination of the application because the device will start a shutdown process soon after entering this level.</summary>
            BATTERY_LEVEL_EMPTY = 4
        }

        /// <summary>
        /// Defines the representation of the charge remaining in the battery.
        /// </summary>
        public enum PowerMode
        {
            POWER_STANDBY = 0,
            POWER_SLEEP = 1,
            /// <summary>The battery is fully charged</summary>
            POWER_MODE_STANDBY = 0,
            /// <summary>The battery has plenty of charge</summary>
            POWER_MODE_SLEEP = 1
        }

        public unsafe partial class PowerManager : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public struct Internal
            {
                /// <summary>
                /// This is the default constructor for this class. This default constructor is intentionally declared as private so that only the platform can create an instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??0PowerManager@System@Tizen@@AAE@XZ")]
                public static extern global::System.IntPtr PowerManager0(global::System.IntPtr instance);

                /// <summary>
                /// Changes the policy of the screen power management.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?KeepScreenOnState@PowerManager@System@Tizen@@SAK_N0@Z")]
                public static extern uint KeepScreenOnState0(bool keepOn, bool dimming);

                /// <summary>
                /// Restores the screen brightness control.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?RestoreScreenBrightness@PowerManager@System@Tizen@@SAKXZ")]
                public static extern uint RestoreScreenBrightness0();

                /// <summary>
                /// Sets the screen brightness level for an application.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?SetScreenBrightness@PowerManager@System@Tizen@@SAKH@Z")]
                public static extern uint SetScreenBrightness0(int brightness);

                /// <summary>
                /// Gets the screen brightness level of an application.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?GetScreenBrightness@PowerManager@System@Tizen@@SAHXZ")]
                public static extern int GetScreenBrightness0();

                /// <summary>
                /// Checks whether the screen is on.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?IsScreenOn@PowerManager@System@Tizen@@SA_NXZ")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool IsScreenOn0();

                /// <summary>
                /// Turns on the screen.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?TurnScreenOn@PowerManager@System@Tizen@@SAKXZ")]
                public static extern uint TurnScreenOn0();

                /// <summary>
                /// Turns off the screen.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?TurnScreenOff@PowerManager@System@Tizen@@SAKXZ")]
                public static extern uint TurnScreenOff0();

                /// <summary>
                /// Changes the policy of the CPU (Central Processing Unit) power management.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?KeepCpuAwake@PowerManager@System@Tizen@@SAK_N@Z")]
                public static extern uint KeepCpuAwake0(bool enable);

                /// <summary>
                /// Gets the current charge remaining in the battery as a percentage.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?GetCurrentBatteryLevelInPercentage@PowerManager@System@Tizen@@SAHXZ")]
                public static extern int GetCurrentBatteryLevelInPercentage0();

                /// <summary>
                /// Gets the current charging level of the battery.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?GetCurrentBatteryLevel@PowerManager@System@Tizen@@SA?AW4BatteryLevel@23@XZ")]
                public static extern BatteryLevel GetCurrentBatteryLevel0();

                /// <summary>
                /// Checks whether the battery is currently charging.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?IsCharging@PowerManager@System@Tizen@@SA_NXZ")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool IsCharging0();
            }

            public global::System.IntPtr _Instance { get; protected set; }

            internal PowerManager(PowerManager.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal PowerManager(PowerManager.Internal native)
                : this(&native)
            {
            }

            internal PowerManager(global::System.IntPtr native)
            {
                _Instance = native;
            }

            public void Dispose()
            {
                Dispose(disposing: true);
                GC.SuppressFinalize(this);
            }

            protected virtual void Dispose(bool disposing)
            {
                Marshal.FreeHGlobal(_Instance);
            }

            /// <summary>
            /// Changes the policy of the screen power management.
            /// </summary>
            public static uint KeepScreenOnState(bool keepOn, bool dimming)
            {
                var ret = Internal.KeepScreenOnState0(keepOn, dimming);
                return ret;
            }

            /// <summary>
            /// Restores the screen brightness control.
            /// </summary>
            public static uint RestoreScreenBrightness()
            {
                var ret = Internal.RestoreScreenBrightness0();
                return ret;
            }

            /// <summary>
            /// Sets the screen brightness level for an application.
            /// </summary>
            public static uint SetScreenBrightness(int brightness)
            {
                var ret = Internal.SetScreenBrightness0(brightness);
                return ret;
            }

            /// <summary>
            /// Gets the screen brightness level of an application.
            /// </summary>
            public static int GetScreenBrightness()
            {
                var ret = Internal.GetScreenBrightness0();
                return ret;
            }

            /// <summary>
            /// Checks whether the screen is on.
            /// </summary>
            public static bool IsScreenOn()
            {
                var ret = Internal.IsScreenOn0();
                return ret;
            }

            /// <summary>
            /// Turns on the screen.
            /// </summary>
            public static uint TurnScreenOn()
            {
                var ret = Internal.TurnScreenOn0();
                return ret;
            }

            /// <summary>
            /// Turns off the screen.
            /// </summary>
            public static uint TurnScreenOff()
            {
                var ret = Internal.TurnScreenOff0();
                return ret;
            }

            /// <summary>
            /// Changes the policy of the CPU (Central Processing Unit) power management.
            /// </summary>
            public static uint KeepCpuAwake(bool enable)
            {
                var ret = Internal.KeepCpuAwake0(enable);
                return ret;
            }

            /// <summary>
            /// Gets the current charge remaining in the battery as a percentage.
            /// </summary>
            public static int GetCurrentBatteryLevelInPercentage()
            {
                var ret = Internal.GetCurrentBatteryLevelInPercentage0();
                return ret;
            }

            /// <summary>
            /// Gets the current charging level of the battery.
            /// </summary>
            public static BatteryLevel GetCurrentBatteryLevel()
            {
                var ret = Internal.GetCurrentBatteryLevel0();
                return ret;
            }

            /// <summary>
            /// Checks whether the battery is currently charging.
            /// </summary>
            public static bool IsCharging()
            {
                var ret = Internal.IsCharging0();
                return ret;
            }
        }
    }
}
