//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Tizen
{
    namespace Base
    {
        /// <summary>
        /// This class represents a mutable sequence of Unicode characters.
        /// </summary>
        public unsafe partial class String : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public struct Internal
            {
                /// <summary>
                /// This is the default constructor for this class. It creates an empty %String instance with the default capacity of 16 bytes.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??0String@Base@Tizen@@QAE@XZ")]
                public static extern global::System.IntPtr String0(global::System.IntPtr instance);

                /// <summary>
                /// Initializes this instance of %String with the specified capacity.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??0String@Base@Tizen@@QAE@H@Z")]
                public static extern global::System.IntPtr String1(global::System.IntPtr instance, int capacity);

                /// <summary>
                /// Initializes this instance of %String with the specified Unicode character.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??0String@Base@Tizen@@QAE@_W@Z")]
                public static extern global::System.IntPtr String2(global::System.IntPtr instance, char ch);

                /// <summary>
                /// Initializes this instance of %String with the specified Unicode string.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??0String@Base@Tizen@@QAE@PB_W@Z")]
                public static extern global::System.IntPtr String3(global::System.IntPtr instance, global::System.IntPtr pValue);

                /// <summary>
                /// Initializes this instance of %String with the specified character string.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??0String@Base@Tizen@@QAE@PBD@Z")]
                public static extern global::System.IntPtr String4(global::System.IntPtr instance, global::System.IntPtr pValue);

                /// <summary>
                /// Checks the two strings for equality.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??8String@Base@Tizen@@QBE_NABV012@@Z")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool OperatorEqualEqual0(global::System.IntPtr instance, global::System.IntPtr rhs);

                /// <summary>
                /// Checks the two strings for inequality.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="??9String@Base@Tizen@@QBE_NABV012@@Z")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool OperatorExclaimEqual0(global::System.IntPtr instance, global::System.IntPtr rhs);

                /// <summary>
                /// Checks whether the string is empty.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?IsEmpty@String@Base@Tizen@@QBE_NXZ")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool IsEmpty0(global::System.IntPtr instance);

                /// <summary>
                /// Appends the specified wchar_t value to this %String instance after converting it.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEK_W@Z")]
                public static extern uint Append0(global::System.IntPtr instance, char ch);

                /// <summary>
                /// Appends the specified char value to this %String instance after converting it.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKD@Z")]
                public static extern uint Append1(global::System.IntPtr instance, sbyte ch);

                /// <summary>
                /// Appends the string representing the specified 32-bit int value to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKH@Z")]
                public static extern uint Append00(global::System.IntPtr instance, int i);

                /// <summary>
                /// Appends the string representing the specified short value to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKF@Z")]
                public static extern uint Append2(global::System.IntPtr instance, short s);

                /// <summary>
                /// Appends the string representing the specified long value to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKJ@Z")]
                public static extern uint Append3(global::System.IntPtr instance, int l);

                /// <summary>
                /// Appends the string representing the specified long long value to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEK_J@Z")]
                public static extern uint Append4(global::System.IntPtr instance, long ll);

                /// <summary>
                /// Appends the string representing the specified float value to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKM@Z")]
                public static extern uint Append5(global::System.IntPtr instance, float f);

                /// <summary>
                /// Appends the string representing the specified double value to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKN@Z")]
                public static extern uint Append6(global::System.IntPtr instance, double d);

                /// <summary>
                /// Appends the specified null-terminated Unicode text to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKPB_W@Z")]
                public static extern uint Append7(global::System.IntPtr instance, global::System.IntPtr p);

                /// <summary>
                /// Appends the specified instance of %String to this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Append@String@Base@Tizen@@QAEKABV123@@Z")]
                public static extern uint Append8(global::System.IntPtr instance, global::System.IntPtr str);

                /// <summary>
                /// Clears the current instance and sets it to an empty %String instance. The capacity is set to 16 bytes, which is the default capacity.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Clear@String@Base@Tizen@@QAEXXZ")]
                public static extern void Clear0(global::System.IntPtr instance);

                /// <summary>
                /// Compares the values of the two strings.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?Compare@String@Base@Tizen@@SAHABV123@0@Z")]
                public static extern int Compare0(global::System.IntPtr str0, global::System.IntPtr str1);

                /// <summary>
                /// Compares the value of the current instance to the value of the specified instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?CompareTo@String@Base@Tizen@@QBEHABV123@@Z")]
                public static extern int CompareTo0(global::System.IntPtr instance, global::System.IntPtr str);

                /// <summary>
                /// Ensures that the specified length is less than or equal to the capacity of the current instance of %String. Otherwise, it expands the capacity of the internal buffer to a value that is greater than or equal to the specified length.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?EnsureCapacity@String@Base@Tizen@@QAEKH@Z")]
                public static extern uint EnsureCapacity0(global::System.IntPtr instance, int minLength);

                /// <summary>
                /// Checks whether the value of the specified instance is equal to the value of the current instance of %String. Case sensitivity can be controlled.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Equals@String@Base@Tizen@@QBE_NABV123@_N@Z")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool Equals1(global::System.IntPtr instance, global::System.IntPtr str, bool caseSensitive);

                /// <summary>
                /// Formats the inputs as per the specified format and sets the value of the calling instance to the resultant string.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.Cdecl,
                    EntryPoint="?Format@String@Base@Tizen@@QAAKHPB_WZZ")]
                public static extern uint Format0(global::System.IntPtr instance, int length, global::System.IntPtr pFormat);

                /// <summary>
                /// Gets the hash value of the current instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetHashCode@String@Base@Tizen@@UBEHXZ")]
                public static extern int GetHashCode0(global::System.IntPtr instance);

                /// <summary>
                /// Gets the character at the specified position.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetCharAt@String@Base@Tizen@@QBEKHAA_W@Z")]
                public static extern uint GetCharAt0(global::System.IntPtr instance, int indexAt, global::System.IntPtr ch);

                /// <summary>
                /// Searches for a character in the calling instance. Gets the index of the first character that matches to the specified character in this instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?IndexOf@String@Base@Tizen@@QBEK_WHAAH@Z")]
                public static extern uint IndexOf0(global::System.IntPtr instance, char ch, int startIndex, global::System.IntPtr indexOf);

                /// <summary>
                /// Searches for a specified substring in the calling instance. Gets the starting index of the first occurrence of the specified substring.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?IndexOf@String@Base@Tizen@@QBEKABV123@HAAH@Z")]
                public static extern uint IndexOf1(global::System.IntPtr instance, global::System.IntPtr str, int startIndex, global::System.IntPtr indexOf);

                /// <summary>
                /// Inserts the string representing the specified Unicode character at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEK_WH@Z")]
                public static extern uint Insert0(global::System.IntPtr instance, char ch, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified char value at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKDH@Z")]
                public static extern uint Insert1(global::System.IntPtr instance, sbyte ch, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified 16-bit integer at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKFH@Z")]
                public static extern uint Insert2(global::System.IntPtr instance, short s, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified 32-bit integer at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKHH@Z")]
                public static extern uint Insert00(global::System.IntPtr instance, int i, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified long value at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKJH@Z")]
                public static extern uint Insert3(global::System.IntPtr instance, int l, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified long long value at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEK_JH@Z")]
                public static extern uint Insert4(global::System.IntPtr instance, long ll, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified float value at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKMH@Z")]
                public static extern uint Insert5(global::System.IntPtr instance, float f, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified double value at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKNH@Z")]
                public static extern uint Insert6(global::System.IntPtr instance, double d, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified null-terminated string at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKPB_WH@Z")]
                public static extern uint Insert7(global::System.IntPtr instance, global::System.IntPtr p, int indexAt);

                /// <summary>
                /// Inserts the string representing the specified instance of %String at the specified position in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Insert@String@Base@Tizen@@QAEKABV123@H@Z")]
                public static extern uint Insert8(global::System.IntPtr instance, global::System.IntPtr str, int indexAt);

                /// <summary>
                /// Searches the calling instance for the last occurrence of the specified character and returns its index. The search begins at the startIndex position and proceeds backward towards the beginning.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?LastIndexOf@String@Base@Tizen@@QBEK_WHAAH@Z")]
                public static extern uint LastIndexOf0(global::System.IntPtr instance, char ch, int startIndex, global::System.IntPtr indexOf);

                /// <summary>
                /// Searches the calling instance for the last occurrence of the specified substring and returns its index. The search begins at the startIndex position and proceeds backward towards the beginning.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?LastIndexOf@String@Base@Tizen@@QBEKABV123@HAAH@Z")]
                public static extern uint LastIndexOf1(global::System.IntPtr instance, global::System.IntPtr str, int startIndex, global::System.IntPtr indexOf);

                /// <summary>
                /// Removes the characters within the specified range.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Remove@String@Base@Tizen@@QAEKHH@Z")]
                public static extern uint Remove0(global::System.IntPtr instance, int startIndex, int length);

                /// <summary>
                /// Replaces all occurrences of the specified characters.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Replace@String@Base@Tizen@@QAEX_W0@Z")]
                public static extern void Replace0(global::System.IntPtr instance, char original, char replace);

                /// <summary>
                /// Replaces all occurrences of the specified string.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Replace@String@Base@Tizen@@QAEKABV123@0@Z")]
                public static extern uint Replace1(global::System.IntPtr instance, global::System.IntPtr original, global::System.IntPtr replace);

                /// <summary>
                /// Replaces all occurrences of the specified string within the substring of this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Replace@String@Base@Tizen@@QAEKABV123@0H@Z")]
                public static extern uint Replace2(global::System.IntPtr instance, global::System.IntPtr original, global::System.IntPtr replace, int startIndex);

                /// <summary>
                /// Reverses the sequence of characters in the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Reverse@String@Base@Tizen@@QAEXXZ")]
                public static extern void Reverse0(global::System.IntPtr instance);

                /// <summary>
                /// Sets the capacity of this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?SetCapacity@String@Base@Tizen@@QAEKH@Z")]
                public static extern uint SetCapacity0(global::System.IntPtr instance, int newCapacity);

                /// <summary>
                /// Sets the character at the specified index with the given character.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?SetCharAt@String@Base@Tizen@@QAEK_WH@Z")]
                public static extern uint SetCharAt0(global::System.IntPtr instance, char ch, int indexAt);

                /// <summary>
                /// Sets the length of this instance of %String.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?SetLength@String@Base@Tizen@@QAEKH@Z")]
                public static extern uint SetLength0(global::System.IntPtr instance, int newLength);

                /// <summary>
                /// Gets a substring starting from the given index.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?SubString@String@Base@Tizen@@QBEKHAAV123@@Z")]
                public static extern uint SubString0(global::System.IntPtr instance, int startIndex, global::System.IntPtr @out);

                /// <summary>
                /// Gets a substring of the given length starting from the specified index.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?SubString@String@Base@Tizen@@QBEKHHAAV123@@Z")]
                public static extern uint SubString1(global::System.IntPtr instance, int startIndex, int length, global::System.IntPtr @out);

                /// <summary>
                /// Checks whether this instance contains the specified text from the given index.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?StartsWith@String@Base@Tizen@@QBE_NABV123@H@Z")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool StartsWith0(global::System.IntPtr instance, global::System.IntPtr str, int startIndex);

                /// <summary>
                /// Checks whether the given string is present at the end of the calling instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?EndsWith@String@Base@Tizen@@QBE_NABV123@@Z")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool EndsWith0(global::System.IntPtr instance, global::System.IntPtr str);

                /// <summary>
                /// [Deprecated]
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToLower@String@Base@Tizen@@QBEKAAV123@@Z")]
                public static extern uint ToLower0(global::System.IntPtr instance, global::System.IntPtr @out);

                /// <summary>
                /// Gets the lowercase form of the string in the calling instance. Unicode characters other than the English alphabets are also supported.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToLowerCase@String@Base@Tizen@@QBEKAAV123@@Z")]
                public static extern uint ToLowerCase0(global::System.IntPtr instance, global::System.IntPtr @out);

                /// <summary>
                /// [Deprecated]
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToUpper@String@Base@Tizen@@QBEKAAV123@@Z")]
                public static extern uint ToUpper0(global::System.IntPtr instance, global::System.IntPtr @out);

                /// <summary>
                /// Gets the uppercase form of the string in the calling instance. Unicode characters other than the English alphabets are also supported.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToUpperCase@String@Base@Tizen@@QBEKAAV123@@Z")]
                public static extern uint ToUpperCase0(global::System.IntPtr instance, global::System.IntPtr @out);

                /// <summary>
                /// [Deprecated]
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToLower@String@Base@Tizen@@QAEXXZ")]
                public static extern void ToLower1(global::System.IntPtr instance);

                /// <summary>
                /// Converts all the letters in this instance to lowercase. Unicode characters other than the English alphabets are also supported.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToLowerCase@String@Base@Tizen@@QAEXXZ")]
                public static extern void ToLowerCase1(global::System.IntPtr instance);

                /// <summary>
                /// [Deprecated]
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToUpper@String@Base@Tizen@@QAEXXZ")]
                public static extern void ToUpper1(global::System.IntPtr instance);

                /// <summary>
                /// Converts all the letters in this instance to uppercase. Unicode characters other than the English alphabets are also supported.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?ToUpperCase@String@Base@Tizen@@QAEXXZ")]
                public static extern void ToUpperCase1(global::System.IntPtr instance);

                /// <summary>
                /// Trims the leading and trailing whitespace characters.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Trim@String@Base@Tizen@@QAEXXZ")]
                public static extern void Trim0(global::System.IntPtr instance);

                /// <summary>
                /// Gets the current capacity of this %String instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetCapacity@String@Base@Tizen@@QBEHXZ")]
                public static extern int GetCapacity0(global::System.IntPtr instance);

                /// <summary>
                /// Gets the length of the text contained in this %String instance.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetLength@String@Base@Tizen@@QBEHXZ")]
                public static extern int GetLength0(global::System.IntPtr instance);

                /// <summary>
                /// Gets a pointer to the instance's internal buffer.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?GetPointer@String@Base@Tizen@@QBEPB_WXZ")]
                public static extern global::System.IntPtr GetPointer0(global::System.IntPtr instance);

                /// <summary>
                /// Checks whether this instance contains the specified substring.
                /// </summary>
                [SuppressUnmanagedCodeSecurity]
                [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
                    EntryPoint="?Contains@String@Base@Tizen@@QBE_NABV123@@Z")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                public static extern bool Contains0(global::System.IntPtr instance, global::System.IntPtr str);
            }

            public global::System.IntPtr _Instance { get; protected set; }

            internal String(String.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal String(String.Internal native)
                : this(&native)
            {
            }

            internal String(global::System.IntPtr native)
            {
                _Instance = native;
            }

            /// <summary>
            /// This is the default constructor for this class. It creates an empty %String instance with the default capacity of 16 bytes.
            /// </summary>
            public String()
            {
                _Instance = Marshal.AllocHGlobal(28);
                Internal.String0(_Instance);
            }

            /// <summary>
            /// Initializes this instance of %String with the specified capacity.
            /// </summary>
            public String(int capacity)
            {
                _Instance = Marshal.AllocHGlobal(28);
                Internal.String1(_Instance, capacity);
            }

            /// <summary>
            /// Initializes this instance of %String with the specified Unicode character.
            /// </summary>
            public String(char ch)
            {
                _Instance = Marshal.AllocHGlobal(28);
                Internal.String2(_Instance, ch);
            }

            /// <summary>
            /// Initializes this instance of %String with the specified Unicode string.
            /// </summary>
            public String(global::System.IntPtr pValue)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(pValue);
                _Instance = Marshal.AllocHGlobal(28);
                Internal.String3(_Instance, arg0);
            }

            /// <summary>
            /// Initializes this instance of %String with the specified character string.
            /// </summary>
            public String(string pValue)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(pValue);
                _Instance = Marshal.AllocHGlobal(28);
                Internal.String4(_Instance, arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
                GC.SuppressFinalize(this);
            }

            protected virtual void Dispose(bool disposing)
            {
                Marshal.FreeHGlobal(_Instance);
            }

            /// <summary>
            /// Checks the two strings for equality.
            /// </summary>
            public static bool operator ==(String _op, String rhs)
            {
                var arg0 = _op._Instance;
                var arg1 = rhs._Instance;
                var ret = Internal.OperatorEqualEqual0(arg0, arg1);
                return ret;
            }

            /// <summary>
            /// Checks the two strings for inequality.
            /// </summary>
            public static bool operator !=(String _op, String rhs)
            {
                var arg0 = _op._Instance;
                var arg1 = rhs._Instance;
                var ret = Internal.OperatorExclaimEqual0(arg0, arg1);
                return ret;
            }

            /// <summary>
            /// Checks whether the string is empty.
            /// </summary>
            public bool IsEmpty()
            {
                var ret = Internal.IsEmpty0(_Instance);
                return ret;
            }

            /// <summary>
            /// Appends the specified wchar_t value to this %String instance after converting it.
            /// </summary>
            public uint Append(char ch)
            {
                var ret = Internal.Append0(_Instance, ch);
                return ret;
            }

            /// <summary>
            /// Appends the specified char value to this %String instance after converting it.
            /// </summary>
            public uint Append(sbyte ch)
            {
                var ret = Internal.Append1(_Instance, ch);
                return ret;
            }

            /// <summary>
            /// Appends the string representing the specified 32-bit int value to this instance of %String.
            /// </summary>
            public uint Append0(int i)
            {
                var ret = Internal.Append00(_Instance, i);
                return ret;
            }

            /// <summary>
            /// Appends the string representing the specified short value to this instance of %String.
            /// </summary>
            public uint Append(short s)
            {
                var ret = Internal.Append2(_Instance, s);
                return ret;
            }

            /// <summary>
            /// Appends the string representing the specified long value to this instance of %String.
            /// </summary>
            public uint Append(int l)
            {
                var ret = Internal.Append3(_Instance, l);
                return ret;
            }

            /// <summary>
            /// Appends the string representing the specified long long value to this instance of %String.
            /// </summary>
            public uint Append(long ll)
            {
                var ret = Internal.Append4(_Instance, ll);
                return ret;
            }

            /// <summary>
            /// Appends the string representing the specified float value to this instance of %String.
            /// </summary>
            public uint Append(float f)
            {
                var ret = Internal.Append5(_Instance, f);
                return ret;
            }

            /// <summary>
            /// Appends the string representing the specified double value to this instance of %String.
            /// </summary>
            public uint Append(double d)
            {
                var ret = Internal.Append6(_Instance, d);
                return ret;
            }

            /// <summary>
            /// Appends the specified null-terminated Unicode text to this instance of %String.
            /// </summary>
            public uint Append(global::System.IntPtr p)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(p);
                var ret = Internal.Append7(_Instance, arg0);
                Marshal.FreeHGlobal(arg0);
                return ret;
            }

            /// <summary>
            /// Appends the specified instance of %String to this instance of %String.
            /// </summary>
            public uint Append(String str)
            {
                var arg0 = str._Instance;
                var ret = Internal.Append8(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// Clears the current instance and sets it to an empty %String instance. The capacity is set to 16 bytes, which is the default capacity.
            /// </summary>
            public void Clear()
            {
                Internal.Clear0(_Instance);
            }

            /// <summary>
            /// Compares the value of the current instance to the value of the specified instance of %String.
            /// </summary>
            public int CompareTo(String str)
            {
                var arg0 = str._Instance;
                var ret = Internal.CompareTo0(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// Ensures that the specified length is less than or equal to the capacity of the current instance of %String. Otherwise, it expands the capacity of the internal buffer to a value that is greater than or equal to the specified length.
            /// </summary>
            public uint EnsureCapacity(int minLength)
            {
                var ret = Internal.EnsureCapacity0(_Instance, minLength);
                return ret;
            }

            /// <summary>
            /// Checks whether the value of the specified instance is equal to the value of the current instance of %String. Case sensitivity can be controlled.
            /// </summary>
            public bool Equals(String str, bool caseSensitive)
            {
                var arg0 = str._Instance;
                var ret = Internal.Equals1(_Instance, arg0, caseSensitive);
                return ret;
            }

            /// <summary>
            /// Formats the inputs as per the specified format and sets the value of the calling instance to the resultant string.
            /// </summary>
            public uint Format(int length, global::System.IntPtr pFormat)
            {
                var arg1 = Marshal.StringToHGlobalAnsi(pFormat);
                var ret = Internal.Format0(_Instance, length, arg1);
                Marshal.FreeHGlobal(arg1);
                return ret;
            }

            /// <summary>
            /// Gets the hash value of the current instance.
            /// </summary>
            public int GetHashCode()
            {
                var ret = Internal.GetHashCode0(_Instance);
                return ret;
            }

            /// <summary>
            /// Gets the character at the specified position.
            /// </summary>
            public uint GetCharAt(int indexAt, global::System.IntPtr ch)
            {
                var arg1 = Marshal.StringToHGlobalAnsi(ch);
                var ret = Internal.GetCharAt0(_Instance, indexAt, arg1);
                Marshal.FreeHGlobal(arg1);
                return ret;
            }

            /// <summary>
            /// Searches for a character in the calling instance. Gets the index of the first character that matches to the specified character in this instance.
            /// </summary>
            public uint IndexOf(char ch, int startIndex, global::System.IntPtr indexOf)
            {
                var arg2 = indexOf;
                var ret = Internal.IndexOf0(_Instance, ch, startIndex, arg2);
                return ret;
            }

            /// <summary>
            /// Searches for a specified substring in the calling instance. Gets the starting index of the first occurrence of the specified substring.
            /// </summary>
            public uint IndexOf(String str, int startIndex, global::System.IntPtr indexOf)
            {
                var arg0 = str._Instance;
                var arg2 = indexOf;
                var ret = Internal.IndexOf1(_Instance, arg0, startIndex, arg2);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified Unicode character at the specified position in the calling instance.
            /// </summary>
            public uint Insert(char ch, int indexAt)
            {
                var ret = Internal.Insert0(_Instance, ch, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified char value at the specified position in the calling instance.
            /// </summary>
            public uint Insert(sbyte ch, int indexAt)
            {
                var ret = Internal.Insert1(_Instance, ch, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified 16-bit integer at the specified position in the calling instance.
            /// </summary>
            public uint Insert(short s, int indexAt)
            {
                var ret = Internal.Insert2(_Instance, s, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified 32-bit integer at the specified position in the calling instance.
            /// </summary>
            public uint Insert0(int i, int indexAt)
            {
                var ret = Internal.Insert00(_Instance, i, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified long value at the specified position in the calling instance.
            /// </summary>
            public uint Insert(int l, int indexAt)
            {
                var ret = Internal.Insert3(_Instance, l, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified long long value at the specified position in the calling instance.
            /// </summary>
            public uint Insert(long ll, int indexAt)
            {
                var ret = Internal.Insert4(_Instance, ll, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified float value at the specified position in the calling instance.
            /// </summary>
            public uint Insert(float f, int indexAt)
            {
                var ret = Internal.Insert5(_Instance, f, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified double value at the specified position in the calling instance.
            /// </summary>
            public uint Insert(double d, int indexAt)
            {
                var ret = Internal.Insert6(_Instance, d, indexAt);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified null-terminated string at the specified position in the calling instance.
            /// </summary>
            public uint Insert(global::System.IntPtr p, int indexAt)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(p);
                var ret = Internal.Insert7(_Instance, arg0, indexAt);
                Marshal.FreeHGlobal(arg0);
                return ret;
            }

            /// <summary>
            /// Inserts the string representing the specified instance of %String at the specified position in the calling instance.
            /// </summary>
            public uint Insert(String str, int indexAt)
            {
                var arg0 = str._Instance;
                var ret = Internal.Insert8(_Instance, arg0, indexAt);
                return ret;
            }

            /// <summary>
            /// Searches the calling instance for the last occurrence of the specified character and returns its index. The search begins at the startIndex position and proceeds backward towards the beginning.
            /// </summary>
            public uint LastIndexOf(char ch, int startIndex, global::System.IntPtr indexOf)
            {
                var arg2 = indexOf;
                var ret = Internal.LastIndexOf0(_Instance, ch, startIndex, arg2);
                return ret;
            }

            /// <summary>
            /// Searches the calling instance for the last occurrence of the specified substring and returns its index. The search begins at the startIndex position and proceeds backward towards the beginning.
            /// </summary>
            public uint LastIndexOf(String str, int startIndex, global::System.IntPtr indexOf)
            {
                var arg0 = str._Instance;
                var arg2 = indexOf;
                var ret = Internal.LastIndexOf1(_Instance, arg0, startIndex, arg2);
                return ret;
            }

            /// <summary>
            /// Removes the characters within the specified range.
            /// </summary>
            public uint Remove(int startIndex, int length)
            {
                var ret = Internal.Remove0(_Instance, startIndex, length);
                return ret;
            }

            /// <summary>
            /// Replaces all occurrences of the specified characters.
            /// </summary>
            public void Replace(char original, char replace)
            {
                Internal.Replace0(_Instance, original, replace);
            }

            /// <summary>
            /// Replaces all occurrences of the specified string.
            /// </summary>
            public uint Replace(String original, String replace)
            {
                var arg0 = original._Instance;
                var arg1 = replace._Instance;
                var ret = Internal.Replace1(_Instance, arg0, arg1);
                return ret;
            }

            /// <summary>
            /// Replaces all occurrences of the specified string within the substring of this instance of %String.
            /// </summary>
            public uint Replace(String original, String replace, int startIndex)
            {
                var arg0 = original._Instance;
                var arg1 = replace._Instance;
                var ret = Internal.Replace2(_Instance, arg0, arg1, startIndex);
                return ret;
            }

            /// <summary>
            /// Reverses the sequence of characters in the calling instance.
            /// </summary>
            public void Reverse()
            {
                Internal.Reverse0(_Instance);
            }

            /// <summary>
            /// Sets the capacity of this instance of %String.
            /// </summary>
            public uint SetCapacity(int newCapacity)
            {
                var ret = Internal.SetCapacity0(_Instance, newCapacity);
                return ret;
            }

            /// <summary>
            /// Sets the character at the specified index with the given character.
            /// </summary>
            public uint SetCharAt(char ch, int indexAt)
            {
                var ret = Internal.SetCharAt0(_Instance, ch, indexAt);
                return ret;
            }

            /// <summary>
            /// Sets the length of this instance of %String.
            /// </summary>
            public uint SetLength(int newLength)
            {
                var ret = Internal.SetLength0(_Instance, newLength);
                return ret;
            }

            /// <summary>
            /// Gets a substring starting from the given index.
            /// </summary>
            public uint SubString(int startIndex, String @out)
            {
                var arg1 = @out._Instance;
                var ret = Internal.SubString0(_Instance, startIndex, arg1);
                return ret;
            }

            /// <summary>
            /// Gets a substring of the given length starting from the specified index.
            /// </summary>
            public uint SubString(int startIndex, int length, String @out)
            {
                var arg2 = @out._Instance;
                var ret = Internal.SubString1(_Instance, startIndex, length, arg2);
                return ret;
            }

            /// <summary>
            /// Checks whether this instance contains the specified text from the given index.
            /// </summary>
            public bool StartsWith(String str, int startIndex)
            {
                var arg0 = str._Instance;
                var ret = Internal.StartsWith0(_Instance, arg0, startIndex);
                return ret;
            }

            /// <summary>
            /// Checks whether the given string is present at the end of the calling instance.
            /// </summary>
            public bool EndsWith(String str)
            {
                var arg0 = str._Instance;
                var ret = Internal.EndsWith0(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// [Deprecated]
            /// </summary>
            public uint ToLower(String @out)
            {
                var arg0 = @out._Instance;
                var ret = Internal.ToLower0(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// Gets the lowercase form of the string in the calling instance. Unicode characters other than the English alphabets are also supported.
            /// </summary>
            public uint ToLowerCase(String @out)
            {
                var arg0 = @out._Instance;
                var ret = Internal.ToLowerCase0(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// [Deprecated]
            /// </summary>
            public uint ToUpper(String @out)
            {
                var arg0 = @out._Instance;
                var ret = Internal.ToUpper0(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// Gets the uppercase form of the string in the calling instance. Unicode characters other than the English alphabets are also supported.
            /// </summary>
            public uint ToUpperCase(String @out)
            {
                var arg0 = @out._Instance;
                var ret = Internal.ToUpperCase0(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// [Deprecated]
            /// </summary>
            public void ToLower()
            {
                Internal.ToLower1(_Instance);
            }

            /// <summary>
            /// Converts all the letters in this instance to lowercase. Unicode characters other than the English alphabets are also supported.
            /// </summary>
            public void ToLowerCase()
            {
                Internal.ToLowerCase1(_Instance);
            }

            /// <summary>
            /// [Deprecated]
            /// </summary>
            public void ToUpper()
            {
                Internal.ToUpper1(_Instance);
            }

            /// <summary>
            /// Converts all the letters in this instance to uppercase. Unicode characters other than the English alphabets are also supported.
            /// </summary>
            public void ToUpperCase()
            {
                Internal.ToUpperCase1(_Instance);
            }

            /// <summary>
            /// Trims the leading and trailing whitespace characters.
            /// </summary>
            public void Trim()
            {
                Internal.Trim0(_Instance);
            }

            /// <summary>
            /// Gets the current capacity of this %String instance.
            /// </summary>
            public int GetCapacity()
            {
                var ret = Internal.GetCapacity0(_Instance);
                return ret;
            }

            /// <summary>
            /// Gets the length of the text contained in this %String instance.
            /// </summary>
            public int GetLength()
            {
                var ret = Internal.GetLength0(_Instance);
                return ret;
            }

            /// <summary>
            /// Gets a pointer to the instance's internal buffer.
            /// </summary>
            public global::System.IntPtr GetPointer()
            {
                var ret = Internal.GetPointer0(_Instance);
                return ret;
            }

            /// <summary>
            /// Checks whether this instance contains the specified substring.
            /// </summary>
            public bool Contains(String str)
            {
                var arg0 = str._Instance;
                var ret = Internal.Contains0(_Instance, arg0);
                return ret;
            }

            /// <summary>
            /// Compares the values of the two strings.
            /// </summary>
            public static int Compare(String str0, String str1)
            {
                var arg0 = str0._Instance;
                var arg1 = str1._Instance;
                var ret = Internal.Compare0(arg0, arg1);
                return ret;
            }

            //public static uint DEFAULT_CAPACITY
            //{
            //    get
            //    {
            //        var _ptr = (uint*)(, );
            //        return *_ptr;
            //    }
            //}
        }
    }
}
