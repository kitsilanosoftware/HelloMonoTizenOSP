//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

/// <summary>
/// byte is an unsigned char datatype.
/// </summary>
/// <summary>
/// result is an unsigned long type and indicates the result of the method
/// execution.
/// </summary>
/// <summary>
/// The invocation ID is returned when a request is sent.
/// </summary>
public unsafe partial class UUID_ : IDisposable
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public struct Internal
    {
        [FieldOffset(0)]
        public uint x;

        [FieldOffset(4)]
        public ushort s1;

        [FieldOffset(6)]
        public ushort s2;

        [FieldOffset(8)]
        public fixed byte c[8];

        [SuppressUnmanagedCodeSecurity]
        [DllImport("SymbolNotFound", CallingConvention = CallingConvention.ThisCall,
            EntryPoint="??0UUID_@@QAE@XZ")]
        public static extern global::System.IntPtr UUID_0(global::System.IntPtr instance);
    }

    public global::System.IntPtr _Instance { get; protected set; }

    internal UUID_(UUID_.Internal* native)
        : this(new global::System.IntPtr(native))
    {
    }

    internal UUID_(UUID_.Internal native)
        : this(&native)
    {
    }

    internal UUID_(global::System.IntPtr native)
    {
        _Instance = native;
    }

    public UUID_()
    {
        _Instance = Marshal.AllocHGlobal(16);
        Internal.UUID_0(_Instance);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        Marshal.FreeHGlobal(_Instance);
    }

    public uint x
    {
        get
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            return _ptr->x;
        }

        set
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            _ptr->x = value;
        }
    }

    public ushort s1
    {
        get
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            return _ptr->s1;
        }

        set
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            _ptr->s1 = value;
        }
    }

    public ushort s2
    {
        get
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            return _ptr->s2;
        }

        set
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            _ptr->s2 = value;
        }
    }

    public byte[] c
    {
        get
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            return null;
        }

        set
        {
            var _ptr = (Internal*)_Instance.ToPointer();
            _ptr->c = null;
        }
    }
}
namespace Tizen
{
    namespace Base
    {
    }
}
